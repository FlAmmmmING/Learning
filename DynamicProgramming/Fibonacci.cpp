// 斐波那契数列——动态规划的优化
#include <iostream>
using namespace std;

//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

// 初始求斐波那契数列
// 尝试
int Fibonacci1(int N)
{
    if (N == 1 || N == 2)
        return 1;
    else
        return Fibonacci1(N - 1) + Fibonacci1(N - 2);
}

//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

// 记忆化搜索
int f2(int N, int dp[])
{
    if (dp[N] != -1)
        return dp[N];
    int ans = 0;
    if (N == 1 || N == 2)
        ans = 1;
    else
        ans = f2(N - 1, dp) + f2(N - 2, dp);
    dp[N] = ans;
    return ans;
}

int Fibonacci2(int N)
{
    // 初始化动态规划数组
    int dp[100];
    for (int i = 0; i < 100; i++)
        dp[i] = -1;
    // 斐波那契数列记忆化搜索函数
    return f2(N, dp);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

// 动态规划求斐波那契数列
int Fibonacci3(int N)
{
    int dp[100];
    // 初始化动态规划数组
    //  表格中1和2的结果都是1
    dp[1] = 1;
    dp[2] = 1;
    for (int i = 3; i < 100; i++)
        dp[i] = 0;
    // 动态规划
    for (int n = 3; n <= N; n++)
    {
        dp[n] = dp[n - 1] + dp[n - 2];
    }
    // 我要的是dp[N]这个地方的数据
    return dp[N];
}
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
    cout << Fibonacci1(8) << endl;
    cout << Fibonacci2(8) << endl;
    cout << Fibonacci3(8) << endl;
    return 0;
}