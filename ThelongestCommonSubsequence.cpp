// 最长公共子序列问题
// eg:
// str1:"a12bc345def"
// str2:"mnp123qrs45z"
// str1和str2最长公共子序列是:"12345"
// 返回5
#include <iostream>
using namespace std;
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

int process01(char str1[], char str2[], int i, int j);
// 尝试
int LongestCommonSubsequence01(char str1[], char str2[], int length1, int length2)
{
    if (length1 == 0 || length2 == 0)
    {
        return 0;
    }
    return process01(str1, str2, length1 - 1, length2 - 1);
}

// 递归只关心str1[0...i]和str[0...j]这两段最长公共子序列有多长
// 从右往左遍历
int process01(char str1[], char str2[], int i, int j)
{
    if (i == 0 && j == 0)
    {
        return str1[i] == str2[j] ? 1 : 0;
    }
    else if (i == 0)
    {
        if (str1[i] == str2[j])
        {
            return 1;
        }
        else
        {
            return process01(str1, str2, i, j - 1);
        }
    }
    else if (j == 0)
    {
        if (str1[i] == str2[j])
        {
            return 1;
        }
        else
        {
            return process01(str1, str2, i - 1, j);
        }
    }
    else // i和j都不是0
    {
        int p1 = process01(str1, str2, i - 1, j);                                    // 考虑str2中第j位这个数要不要
        int p2 = process01(str1, str2, i, j - 1);                                    // 考虑str1中第i位这个数要不要
        int p3 = str1[i] == str2[j] ? (1 + process01(str1, str2, i - 1, j - 1)) : 0; // 考虑i和j是否相等
        return max(p1, max(p2, p3));
    }
}

//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

// 动态规划
int LongestCommonSubsequence02(char str1[], char str2[], int length1, int length2)
{
    if (length1 == 0 || length2 == 0)
    {
        return 0;
    }
    // dp表的大小为[length1][length2]
    int dp[100][100];
    // 分析位置依赖——看如何调用的主函数
    dp[0][0] = str1[0] == str2[0] ? 1 : 0;
    for (int j = 1; j < length2; j++)
    {
        dp[0][j] = str1[0] == str2[j] ? 1 : dp[0][j - 1];
    }
    for (int i = 1; i < length1; i++)
    {
        dp[i][0] = str1[i] == str2[0] ? 1 : dp[i - 1][0];
    }
    for (int i = 1; i < length1; i++)
    {
        for (int j = 1; j < length2; j++)
        {
            dp[i][j] = max(dp[i - 1][j], max(dp[i][j - 1], (str1[i] == str2[j] ? 1 + dp[i - 1][j - 1] : 0)));
        }
    }

    // 返回什么看原来的递归代码
    return dp[length1 - 1][length2 - 1];
}

//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
    char str1[] = "ab12c3d";
    char str2[] = "efg123xy";
    cout << LongestCommonSubsequence01(str1, str2, 7, 8) << endl;
    cout << LongestCommonSubsequence02(str1, str2, 7, 8) << endl;
    return 0;
}